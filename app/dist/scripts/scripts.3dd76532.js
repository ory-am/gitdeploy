"use strict";angular.module("gitdeployApp",["ngAnimate","ngCookies","ngResource","ngRoute","ngSanitize","chart.js","ngTouch"]).config(["$routeProvider","$locationProvider","$httpProvider",function(a,b,c){c.interceptors.push("httpErrorInterceptor"),a.when("/",{templateUrl:"views/landing.html",controller:"LandingCtrl"}).when("/deploy",{templateUrl:"views/deploy.html",controller:"DeployCtrl"}).when("/dashboard/:app",{templateUrl:"views/dashboard.html",controller:"DashboardCtrl"}).when("/account/create",{templateUrl:"views/accountcreate.html",controller:"AccountCreateCtrl"}).when("/connect",{templateUrl:"views/connect.html",controller:"ConnectCtrl"}).when("/connect/callback",{templateUrl:"views/githubcallback.html",controller:"GithubCallbackCtrl"}).otherwise({redirectTo:"/"}),b.html5Mode(!0)}]),angular.module("gitdeployApp").controller("LandingCtrl",["$window","$scope",function(a,b){b.repository={},b.createShield=function(a){var c,d=document.createElement("a");return a.stopPropagation(),d.href=b.repository.url,b.repository.readmeUrl=d.href.substr(0,d.href.length-4)+"/edit/master/README.md",c=d.pathname.substr(1),c=c.substring(0,c.length-4),c=c.split("/")[1],b.repository.name=c,c=c.replace(/\-/g,"--")+"/master",b.repository.badge="https://img.shields.io/badge/gitdeploy.io-deploy%20"+c+"-green.svg",b.repository.deployUrl=window.location.protocol+"//"+window.location.host+"/deploy?repository="+encodeURIComponent(b.repository.url),b.repository.showBadge=!0,b.repository.deployUrl=window.location.protocol+"//"+window.location.host+"/deploy?repository="+encodeURIComponent(b.repository.url),!1},b.showIntegration=function(a){return a.stopPropagation(),$("#shieldModal").modal("show"),!1}}]),angular.module("gitdeployApp").controller("DeployCtrl",["$scope","$routeParams","$http","endpoint",function(a,b,c,d){var e=b.repository,f=function(b){var c=d.sse+"/deployments/"+b+"/events",e=new EventSource(c);return e.addEventListener("open",function(b){a.deploying=!0,console.log("Channel opened!",b)}),{addEventListener:function(b,c){e.addEventListener(b,function(b){a.$apply(function(){c(b)})})}}};return a.logs=[],a.app="",a.deploying=!1,void 0===e||e.length<1?void(a.error="The repository query parameter is missing."):(a.error=!1,void c.post(d.deploy+"/deployments",{repository:e}).success(function(b){var c=f(b.data.id);a.app=b.data.id,c.addEventListener("message",function(b){var c;try{c=JSON.parse(b.data)}catch(d){return void console.log(d)}"app.deployed"===c.eventName&&(a.deploying=!1,window.location.href="/dashboard/"+a.app),a.logs.unshift(c.data.replace(/(\r\n|\r|\n)/gm,"\n")),a.logMessages=a.logs.join("\n")},!1),c.addEventListener("error",function(b){a.error="The backend server does not respond correctly or closed the connection.",b.currentTarget.close()})}).error(function(b){null===b||void 0===b.error?a.error="The backend server returned an error: No response was given, come back later.":a.error="The backend server returned an error: "+(b.error.message||"No response was given, come back later.")}))}]),angular.module("gitdeployApp").controller("NavCtrl",["$scope",function(a){a.awesomeThings=["HTML5 Boilerplate","AngularJS","Karma"]}]),angular.module("gitdeployApp").service("endpoint",function(){var a,b="localhost"===window.location.hostname;return a=b?"http://"+window.location.hostname+":"+window.location.port:window.location.protocol+"//"+window.location.hostname,{sse:a,deploy:a,apps:a,config:a,authentication:a}}),angular.module("gitdeployApp").controller("DashboardCtrl",["$scope","$routeParams","apps","config",function(a,b,c,d){var e=b.app;c.getApp(e).then(function(b){var c;a.$apply(function(){var c,d=[];angular.forEach(b.data.deployLogs,function(a){try{var b=JSON.parse(a.message);d.unshift(b.data.replace(/(\r\n|\r|\n)/gm,"\n"))}catch(c){console.log(c)}}),b.data.deployLogs=d.join("\n"),c=b.data.ps.split("\n"),b.data.ps=[],b.data.expiresAt=moment(b.data.expiresAt),b.data.createdAt=moment(b.data.createdAt),angular.forEach(c,function(a){a=a.split(/\s+/),b.data.ps.push({id:a[0],type:a[1]})}),b.data.ps.splice(0,1),a.app=b.data}),c=function(){a.ttl=a.serverTime.diff(a.app.expiresAt)},d.get().then(function(b){a.$apply(function(){console.log(b),a.serverTime=moment(b.data.time),c()})})}),a.labels=["Time used","Time available"],a.data=[2,13],a.colors=["#DCDCDC","#97BBCD"]}]),angular.module("gitdeployApp").service("apps",["endpoint","$http",function(a,b){return{getApp:function(c){return new Promise(function(d,e){b.get(a.apps+"/apps/"+c,{withCredentials:!0}).success(d).error(e)})}}}]),angular.module("gitdeployApp").factory("httpErrorInterceptor",["$q","$rootScope",function(a,b){return{responseError:function(c){return console.log("rror in response!",c),0===c.status?b.error={status:0,message:"The backend service is unavailable. Either the network is down or there are temporary issues with the backend. Try again later."}:b.error={status:c.status,message:c.data.error.message},b.$broadcast("error"),a.reject(c)}}}]),angular.module("gitdeployApp").controller("ErrorCtrl",["$rootScope","$scope",function(a,b){b.$on("error",function(){console.log("err",b.error),a.error=b.error}),a.reload=function(){window.location.reload()}}]),angular.module("gitdeployApp").service("config",["endpoint","$http",function(a,b){return{getServerTime:function(){return new Promise(function(c,d){b.get(a.apps+"/config",{withCredentials:!0}).success(function(a){c(a.now)}).error(d)})},getCluster:function(){return new Promise(function(c,d){b.get(a.apps+"/config",{withCredentials:!0}).success(function(a){c(a.cluster)}).error(d)})},get:function(){return new Promise(function(c,d){b.get(a.apps+"/config",{withCredentials:!0}).success(c).error(d)})}}}]);